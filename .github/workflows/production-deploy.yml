name: Production Deployment Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      - name: Run security scan
        run: npm audit --audit-level=high

      - name: Build applications
        run: npm run build

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker images
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  database-migration:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          kubectl config current-context

      - name: Run database migrations
        run: |
          kubectl create job migration-$(date +%s) \
            --from=cronjob/database-migrator \
            --namespace=devflow-production
          
          # Wait for migration to complete
          kubectl wait --for=condition=complete \
            --timeout=300s \
            job/migration-$(date +%s) \
            --namespace=devflow-production

  deploy-staging:
    needs: [build-and-test, database-migration]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config

      - name: Deploy to staging
        run: |
          # Update deployment with new image
          kubectl set image deployment/api-gateway \
            api-gateway=${{ needs.build-and-test.outputs.image-tag }} \
            --namespace=devflow-staging
          
          kubectl set image deployment/data-ingestion \
            data-ingestion=${{ needs.build-and-test.outputs.image-tag }} \
            --namespace=devflow-staging
          
          kubectl set image deployment/stream-processing \
            stream-processing=${{ needs.build-and-test.outputs.image-tag }} \
            --namespace=devflow-staging
          
          kubectl set image deployment/ml-pipeline \
            ml-pipeline=${{ needs.build-and-test.outputs.image-tag }} \
            --namespace=devflow-staging

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/api-gateway --namespace=devflow-staging --timeout=300s
          kubectl rollout status deployment/data-ingestion --namespace=devflow-staging --timeout=300s
          kubectl rollout status deployment/stream-processing --namespace=devflow-staging --timeout=300s
          kubectl rollout status deployment/ml-pipeline --namespace=devflow-staging --timeout=300s

      - name: Run health checks
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Check health endpoints
          kubectl run health-check --rm -i --restart=Never \
            --image=curlimages/curl \
            --namespace=devflow-staging \
            -- curl -f http://api-gateway:3000/health

      - name: Run integration tests
        run: |
          npm run test:integration:staging

  deploy-production:
    needs: [build-and-test, database-migration, deploy-staging]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || (github.event.inputs.environment == 'production' && github.event_name == 'workflow_dispatch')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

      - name: Handle rollback
        if: github.event.inputs.rollback == 'true'
        run: |
          # Rollback to previous version
          kubectl rollout undo deployment/api-gateway --namespace=devflow-production
          kubectl rollout undo deployment/data-ingestion --namespace=devflow-production
          kubectl rollout undo deployment/stream-processing --namespace=devflow-production
          kubectl rollout undo deployment/ml-pipeline --namespace=devflow-production
          
          # Wait for rollback to complete
          kubectl rollout status deployment/api-gateway --namespace=devflow-production --timeout=300s
          kubectl rollout status deployment/data-ingestion --namespace=devflow-production --timeout=300s
          kubectl rollout status deployment/stream-processing --namespace=devflow-production --timeout=300s
          kubectl rollout status deployment/ml-pipeline --namespace=devflow-production --timeout=300s
          
          exit 0

      - name: Blue-Green Deployment
        run: |
          # Determine current active slot
          CURRENT_SLOT=$(kubectl get service api-gateway -o jsonpath='{.spec.selector.slot}' --namespace=devflow-production || echo "blue")
          TARGET_SLOT=$([ "$CURRENT_SLOT" = "blue" ] && echo "green" || echo "blue")
          
          echo "Deploying to $TARGET_SLOT slot (current: $CURRENT_SLOT)"
          
          # Deploy to inactive slot
          kubectl set image deployment/api-gateway-$TARGET_SLOT \
            api-gateway=${{ needs.build-and-test.outputs.image-tag }} \
            --namespace=devflow-production
          
          kubectl set image deployment/data-ingestion-$TARGET_SLOT \
            data-ingestion=${{ needs.build-and-test.outputs.image-tag }} \
            --namespace=devflow-production
          
          kubectl set image deployment/stream-processing-$TARGET_SLOT \
            stream-processing=${{ needs.build-and-test.outputs.image-tag }} \
            --namespace=devflow-production
          
          kubectl set image deployment/ml-pipeline-$TARGET_SLOT \
            ml-pipeline=${{ needs.build-and-test.outputs.image-tag }} \
            --namespace=devflow-production

      - name: Wait for deployment readiness
        run: |
          TARGET_SLOT=$(kubectl get service api-gateway -o jsonpath='{.spec.selector.slot}' --namespace=devflow-production)
          TARGET_SLOT=$([ "$TARGET_SLOT" = "blue" ] && echo "green" || echo "blue")
          
          kubectl rollout status deployment/api-gateway-$TARGET_SLOT --namespace=devflow-production --timeout=600s
          kubectl rollout status deployment/data-ingestion-$TARGET_SLOT --namespace=devflow-production --timeout=600s
          kubectl rollout status deployment/stream-processing-$TARGET_SLOT --namespace=devflow-production --timeout=600s
          kubectl rollout status deployment/ml-pipeline-$TARGET_SLOT --namespace=devflow-production --timeout=600s

      - name: Run production health checks
        run: |
          TARGET_SLOT=$(kubectl get service api-gateway -o jsonpath='{.spec.selector.slot}' --namespace=devflow-production)
          TARGET_SLOT=$([ "$TARGET_SLOT" = "blue" ] && echo "green" || echo "blue")
          
          # Wait for services to stabilize
          sleep 60
          
          # Comprehensive health checks
          kubectl run health-check-$TARGET_SLOT --rm -i --restart=Never \
            --image=curlimages/curl \
            --namespace=devflow-production \
            -- curl -f http://api-gateway-$TARGET_SLOT:3000/health
          
          # Run smoke tests
          npm run test:smoke:production

      - name: Switch traffic to new deployment
        run: |
          CURRENT_SLOT=$(kubectl get service api-gateway -o jsonpath='{.spec.selector.slot}' --namespace=devflow-production)
          TARGET_SLOT=$([ "$CURRENT_SLOT" = "blue" ] && echo "green" || echo "blue")
          
          echo "Switching traffic from $CURRENT_SLOT to $TARGET_SLOT"
          
          # Update service selectors to point to new slot
          kubectl patch service api-gateway \
            -p '{"spec":{"selector":{"slot":"'$TARGET_SLOT'"}}}' \
            --namespace=devflow-production
          
          kubectl patch service data-ingestion \
            -p '{"spec":{"selector":{"slot":"'$TARGET_SLOT'"}}}' \
            --namespace=devflow-production
          
          kubectl patch service stream-processing \
            -p '{"spec":{"selector":{"slot":"'$TARGET_SLOT'"}}}' \
            --namespace=devflow-production
          
          kubectl patch service ml-pipeline \
            -p '{"spec":{"selector":{"slot":"'$TARGET_SLOT'"}}}' \
            --namespace=devflow-production

      - name: Verify production deployment
        run: |
          # Wait for traffic switch to take effect
          sleep 30
          
          # Verify services are responding
          kubectl run production-verify --rm -i --restart=Never \
            --image=curlimages/curl \
            --namespace=devflow-production \
            -- curl -f http://api-gateway:3000/health
          
          # Run full integration tests
          npm run test:integration:production

      - name: Scale down old deployment
        run: |
          CURRENT_SLOT=$(kubectl get service api-gateway -o jsonpath='{.spec.selector.slot}' --namespace=devflow-production)
          OLD_SLOT=$([ "$CURRENT_SLOT" = "blue" ] && echo "green" || echo "blue")
          
          echo "Scaling down old deployment ($OLD_SLOT)"
          
          kubectl scale deployment api-gateway-$OLD_SLOT --replicas=0 --namespace=devflow-production
          kubectl scale deployment data-ingestion-$OLD_SLOT --replicas=0 --namespace=devflow-production
          kubectl scale deployment stream-processing-$OLD_SLOT --replicas=0 --namespace=devflow-production
          kubectl scale deployment ml-pipeline-$OLD_SLOT --replicas=0 --namespace=devflow-production

      - name: Update deployment status
        run: |
          # Record successful deployment
          kubectl annotate deployment api-gateway \
            deployment.kubernetes.io/revision-history="$(date): Deployed ${{ needs.build-and-test.outputs.image-tag }}" \
            --namespace=devflow-production

  notify-deployment:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Production deployment ${{ job.status }}!
            Image: ${{ needs.build-and-test.outputs.image-tag }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Clean up old images
        run: |
          # Clean up old container images (keep last 5)
          echo "Cleaning up old container images..."
          # This would typically use a container registry API or tool