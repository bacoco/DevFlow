apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-migrator
  namespace: devflow-production
  labels:
    app: database-migrator
    component: migration
spec:
  schedule: "0 2 * * *"  # Run daily at 2 AM
  suspend: true  # Manually triggered during deployments
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      backoffLimit: 2
      activeDeadlineSeconds: 1800  # 30 minutes timeout
      template:
        metadata:
          labels:
            app: database-migrator
            component: migration
        spec:
          restartPolicy: Never
          containers:
          - name: migrator
            image: ghcr.io/devflow/database-migrator:latest
            env:
            - name: NODE_ENV
              value: "production"
            - name: MONGODB_URL
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: mongodb-url
            - name: INFLUXDB_URL
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: influxdb-url
            - name: INFLUXDB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: influxdb-token
            - name: INFLUXDB_ORG
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: influxdb-org
            - name: INFLUXDB_BUCKET
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: influxdb-bucket
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: redis-url
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 500m
                memory: 512Mi
            securityContext:
              runAsNonRoot: true
              runAsUser: 1000
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                - ALL
            volumeMounts:
            - name: migration-logs
              mountPath: /app/logs
          volumes:
          - name: migration-logs
            emptyDir: {}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: initial-migration
  namespace: devflow-production
  labels:
    app: database-migrator
    component: initial-setup
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 3600  # 1 hour timeout
  template:
    metadata:
      labels:
        app: database-migrator
        component: initial-setup
    spec:
      restartPolicy: Never
      initContainers:
      - name: wait-for-databases
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "Waiting for databases to be ready..."
          # Wait for MongoDB
          until nc -z mongodb-service 27017; do
            echo "Waiting for MongoDB..."
            sleep 5
          done
          # Wait for InfluxDB
          until nc -z influxdb-service 8086; do
            echo "Waiting for InfluxDB..."
            sleep 5
          done
          # Wait for Redis
          until nc -z redis-service 6379; do
            echo "Waiting for Redis..."
            sleep 5
          done
          echo "All databases are ready!"
      containers:
      - name: migrator
        image: ghcr.io/devflow/database-migrator:latest
        command: ["node", "dist/migration-runner.js"]
        env:
        - name: NODE_ENV
          value: "production"
        - name: MIGRATION_MODE
          value: "initial"
        - name: MONGODB_URL
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mongodb-url
        - name: INFLUXDB_URL
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: influxdb-url
        - name: INFLUXDB_TOKEN
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: influxdb-token
        - name: INFLUXDB_ORG
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: influxdb-org
        - name: INFLUXDB_BUCKET
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: influxdb-bucket
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: redis-url
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: migration-logs
          mountPath: /app/logs
        - name: migration-scripts
          mountPath: /app/migrations
          readOnly: true
      volumes:
      - name: migration-logs
        persistentVolumeClaim:
          claimName: migration-logs-pvc
      - name: migration-scripts
        configMap:
          name: migration-scripts

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: migration-logs-pvc
  namespace: devflow-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: migration-scripts
  namespace: devflow-production
data:
  001_initial_schema.js: |
    module.exports = {
      id: '001_initial_schema',
      version: '1.0.0',
      description: 'Create initial database schema',
      up: async (context) => {
        const { mongodb, logger } = context;
        
        // Create collections
        await mongodb.createCollection('users');
        await mongodb.createCollection('teams');
        await mongodb.createCollection('projects');
        await mongodb.createCollection('privacy_settings');
        
        // Create indexes
        await mongodb.collection('users').createIndex({ email: 1 }, { unique: true });
        await mongodb.collection('teams').createIndex({ name: 1 });
        await mongodb.collection('projects').createIndex({ teamId: 1 });
        await mongodb.collection('privacy_settings').createIndex({ userId: 1 }, { unique: true });
        
        logger.info('Initial schema created successfully');
      },
      down: async (context) => {
        const { mongodb, logger } = context;
        
        await mongodb.collection('users').drop();
        await mongodb.collection('teams').drop();
        await mongodb.collection('projects').drop();
        await mongodb.collection('privacy_settings').drop();
        
        logger.info('Initial schema dropped');
      }
    };
  
  002_add_audit_trail.js: |
    module.exports = {
      id: '002_add_audit_trail',
      version: '1.1.0',
      description: 'Add audit trail collection',
      dependencies: ['001_initial_schema'],
      up: async (context) => {
        const { mongodb, logger } = context;
        
        await mongodb.createCollection('audit_logs');
        await mongodb.collection('audit_logs').createIndex({ userId: 1, timestamp: -1 });
        await mongodb.collection('audit_logs').createIndex({ action: 1 });
        await mongodb.collection('audit_logs').createIndex({ timestamp: -1 });
        
        logger.info('Audit trail collection created');
      },
      down: async (context) => {
        const { mongodb, logger } = context;
        
        await mongodb.collection('audit_logs').drop();
        
        logger.info('Audit trail collection dropped');
      }
    };